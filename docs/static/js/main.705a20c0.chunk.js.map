{"version":3,"sources":["../../lib/dist/index.js","../../lib/dist/color.js","../../lib/dist/validator.js","../../lib/dist/builder.js","../../lib/dist/sprite.js","../../lib/dist/util.js","../../lib/dist/constants.js","App.tsx","index.tsx"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","SpriteUtils","Sprite","SpriteBuilder","Color","color_1","require","default","builder_1","sprite_1","util_1","validator_1","r","g","b","a","_color","toPct","other","alpha","red","green","blue","others","some","color","equals","redByte","greenByte","blueByte","alphaByte","toByteArray","toString","Math","round","w","percentage","w1","w2","randomAlpha","random","colorValue","positiveInteger","colorString","startsWith","slice","fromInt","parseInt","n","valueName","withinPct","withinByte","Error","BLACK","WHITE","TRANSPARENT","validateInteger","name","Number","isInteger","validatePositive","Validator","integer","positive","positiveNonZero","_1","constants_1","spriteDimensions","blankPercentage","colorPallet","useRandomPallet","randomColorCount","border","horizontalSymmetry","blankColor","validate","result","dim","colorFill","realPallet","addBlanks","getPallet","i","queue","y","ceil","Dimension","Height","element","x","Width","selectedColor","selectColor","floor","setPixelAt","length","pop","push","borders","borderColor","Border","Left","Right","Up","Down","j","pixelAt","edgeColor","edgeWeight","addExtraBorder","withBorder","pixel","setPixelAtChecked","mixWeighed","func","paddingColor","old","leftOffset","topOffset","randomPallet","pallet","randInt","blanksToInsert","concat","Array","fill","map","copy","min","max","colorCount","from","array","arr","_dim","_array","_pallet","trimPallet","_horizontalSymmetry","toArray","_","width","unit","parameters","h","svgExact","height","rgba","toRgba","pixelSize","Uint32Array","forEach","index","toInt","Uint8Array","checkIndex","withinBounds","filter","clamp","Utils","transformFade","yR","transformVignette","cx","cy","sqrt","pow","dimMatrix","type","btnStyle","position","padding","backgroundColor","borderRadius","outline","cursor","lineHeight","canvasSize","App","useState","reload","setReload","sameColor","setSameColor","config","style","textAlign","display","justifyContent","flexWrap","id","onClick","document","getElementById","console","log","alert","svg","querySelector","canvas","createElement","ctx","getContext","loader","Image","onload","drawImage","image","toDataURL","link","download","href","click","svgAsXML","XMLSerializer","serializeToString","src","encodeURIComponent","saveSvg","dangerouslySetInnerHTML","__html","withDim","single","withEdges","withPadding","transform","build","svgWidth","right","bottom","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.705a20c0.chunk.js","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SpriteUtils = exports.Sprite = exports.SpriteBuilder = exports.Color = void 0;\r\nvar color_1 = require(\"./color\");\r\nObject.defineProperty(exports, \"Color\", { enumerable: true, get: function () { return color_1.default; } });\r\n__exportStar(require(\"./color\"), exports);\r\nvar builder_1 = require(\"./builder\");\r\nObject.defineProperty(exports, \"SpriteBuilder\", { enumerable: true, get: function () { return builder_1.default; } });\r\n__exportStar(require(\"./builder\"), exports);\r\nvar sprite_1 = require(\"./sprite\");\r\nObject.defineProperty(exports, \"Sprite\", { enumerable: true, get: function () { return sprite_1.default; } });\r\n__exportStar(require(\"./sprite\"), exports);\r\nvar util_1 = require(\"./util\");\r\nObject.defineProperty(exports, \"SpriteUtils\", { enumerable: true, get: function () { return util_1.default; } });\r\n__exportStar(require(\"./util\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst validator_1 = require(\"./validator\");\r\nclass Color {\r\n    constructor(r, g, b, a = 1.0) {\r\n        this._color = [\r\n            Color.toPct(r, 'Red'),\r\n            Color.toPct(g, 'Green'),\r\n            Color.toPct(b, 'Blue'),\r\n            Color.toPct(a, 'Alpha')\r\n        ];\r\n    }\r\n    copy() {\r\n        return new Color(this._color[0], this._color[1], this._color[2], this._color[3]);\r\n    }\r\n    equals(other) {\r\n        return (this.alpha === other.alpha &&\r\n            this.red === other.red &&\r\n            this.green === other.green &&\r\n            this.blue === other.blue);\r\n    }\r\n    equalsAny(others) {\r\n        return others.some(color => {\r\n            return this.equals(color);\r\n        });\r\n    }\r\n    static random(randomAlpha = true) {\r\n        return new Color(Math.random(), Math.random(), Math.random(), randomAlpha ? Math.random() : 1);\r\n    }\r\n    get red() {\r\n        return this._color[0];\r\n    }\r\n    get green() {\r\n        return this._color[1];\r\n    }\r\n    get blue() {\r\n        return this._color[2];\r\n    }\r\n    get alpha() {\r\n        return this._color[3];\r\n    }\r\n    set red(value) {\r\n        this._color[0] = Color.toPct(value, 'Red');\r\n    }\r\n    set green(value) {\r\n        this._color[1] = Color.toPct(value, 'Green');\r\n    }\r\n    set blue(value) {\r\n        this._color[2] = Color.toPct(value, 'Blue');\r\n    }\r\n    set alpha(value) {\r\n        this._color[3] = Color.toPct(value, 'Alpha');\r\n    }\r\n    get redByte() {\r\n        return this._color[0] * 255;\r\n    }\r\n    get greenByte() {\r\n        return this._color[1] * 255;\r\n    }\r\n    get blueByte() {\r\n        return this._color[2] * 255;\r\n    }\r\n    get alphaByte() {\r\n        return this._color[3] * 255;\r\n    }\r\n    toArray() {\r\n        return [...this._color];\r\n    }\r\n    toByteArray() {\r\n        return [this.redByte, this.greenByte, this.blueByte, this.alphaByte];\r\n    }\r\n    toInt() {\r\n        let color = this.toByteArray();\r\n        return ((((color[3] * 255) & 0xff) << 24) |\r\n            (((color[0] * 255) & 0xff) << 16) |\r\n            (((color[1] * 255) & 0xff) << 8) |\r\n            ((color[2] & 0xff) << 0));\r\n    }\r\n    toHexa() {\r\n        return (this.alphaByte.toString(16) +\r\n            this.redByte.toString(16) +\r\n            this.greenByte.toString(16) +\r\n            this.blueByte.toString(16));\r\n    }\r\n    toRgb() {\r\n        return `rgb(${Math.round(this.red * 255)}, ${Math.round(this.green * 255)}, ${Math.round(this.blue * 255)})`;\r\n    }\r\n    toRgba() {\r\n        return `rgba(${Math.round(this.red * 255)}, ${Math.round(this.green * 255)}, ${Math.round(this.blue * 255)}, ${this.alpha})`;\r\n    }\r\n    static fromInt(colorValue) {\r\n        validator_1.default.positiveInteger(colorValue, 'colorValue');\r\n        let a = (colorValue & 0xff000000) >>> 24;\r\n        let r = (colorValue & 0x00ff0000) >>> 16;\r\n        let g = (colorValue & 0x0000ff00) >>> 8;\r\n        let b = (colorValue & 0x000000ff) >>> 0;\r\n        return new Color(r, g, b, a);\r\n    }\r\n    static fromHexa(colorString) {\r\n        if (colorString.startsWith('#'))\r\n            colorString = colorString.slice(1);\r\n        if (!colorString.startsWith('0x'))\r\n            colorString = '0x' + colorString;\r\n        return Color.fromInt(parseInt(colorString));\r\n    }\r\n    static withinPct(n) {\r\n        return n >= 0.0 && n <= 1.0;\r\n    }\r\n    static withinByte(n) {\r\n        return n >= 0.0 && n <= 255.0;\r\n    }\r\n    static toPct(n, valueName = 'value') {\r\n        if (Color.withinPct(n))\r\n            return n;\r\n        else if (Color.withinByte(n))\r\n            return n / 255;\r\n        else\r\n            throw new Error(`Invalid ${valueName}: ${n} when converting color. Value N must be either 0 <= N <= 1.0 or 0 <= N <= 255.`);\r\n    }\r\n    mix(other) {\r\n        return new Color((this.red + other.red) / 2, (this.green + other.green) / 2, (this.blue + other.blue) / 2, (this.alpha + other.alpha) / 2);\r\n    }\r\n    mixWeighed(other, w) {\r\n        validator_1.default.percentage(w, 'Color Weight');\r\n        let w1 = 1 - w;\r\n        let w2 = w;\r\n        return new Color(this.red * w1 + other.red * w2, this.green * w1 + other.green * w2, this.blue * w1 + other.blue * w2, this.alpha * w1 + other.alpha * w2);\r\n    }\r\n}\r\nColor.BLACK = new Color(0, 0, 0, 1);\r\nColor.WHITE = new Color(1, 1, 1, 1);\r\nColor.TRANSPARENT = new Color(0, 0, 0, 0);\r\nexports.default = Color;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst validateInteger = (value, name) => {\r\n    if (!Number.isInteger(value)) {\r\n        throw new Error(`[Validator] Expected integer for ${name} but found ${value}`);\r\n    }\r\n};\r\nconst validatePositive = (value, name) => {\r\n    if (value < 0.0) {\r\n        throw new Error(`[Validator] Expected positive value for ${name} but found ${value}`);\r\n    }\r\n};\r\nconst validatePercentage = (value, name) => {\r\n    if (value < 0.0 || value > 1.0) {\r\n        throw new Error(`[Validator] Expected percentage value for ${name} but found ${value}`);\r\n    }\r\n};\r\nconst validatePositiveNonZero = (value, name) => {\r\n    if (value <= 0.0) {\r\n        throw new Error(`[Validator] Expected positive non-zero value for ${name} but found ${value}`);\r\n    }\r\n};\r\nconst validatePositiveInteger = (value, name) => {\r\n    validateInteger(value, name);\r\n    validatePositive(value, name);\r\n};\r\nclass Validator {\r\n}\r\nValidator.integer = validateInteger;\r\nValidator.positive = validatePositive;\r\nValidator.positiveInteger = validatePositiveInteger;\r\nValidator.percentage = validatePercentage;\r\nValidator.positiveNonZero = validatePositiveNonZero;\r\nexports.default = Validator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _1 = require(\".\");\r\nconst constants_1 = require(\"./constants\");\r\nconst sprite_1 = require(\"./sprite\");\r\nconst validator_1 = require(\"./validator\");\r\nclass SpriteBuilder {\r\n    constructor({ spriteDimensions = [7, 7], blankPercentage = 0.5, colorPallet = [_1.Color.random(), _1.Color.random(), _1.Color.random()], useRandomPallet = false, randomColorCount = 3, randomAlpha = false, border = 1, horizontalSymmetry = false, blankColor = _1.Color.WHITE }) {\r\n        this.spriteDimensions = spriteDimensions;\r\n        this.blankPercentage = blankPercentage;\r\n        this.colorPallet = colorPallet;\r\n        this.useRandomPallet = useRandomPallet;\r\n        this.randomColorCount = randomColorCount;\r\n        this.randomAlpha = randomAlpha;\r\n        this.border =\r\n            typeof border === 'number'\r\n                ? [border, border, border, border]\r\n                : border;\r\n        this.horizontalSymmetry = horizontalSymmetry;\r\n        this.blankColor = blankColor;\r\n        this.validate();\r\n    }\r\n    single() {\r\n        let result = new sprite_1.default({\r\n            dim: this.spriteDimensions,\r\n            colorFill: this.blankColor\r\n        });\r\n        const realPallet = this.addBlanks(this.getPallet());\r\n        let i = 1;\r\n        let m = 1;\r\n        let queue = [];\r\n        if (this.horizontalSymmetry) {\r\n            m = 2;\r\n        }\r\n        for (let y = 0; y < Math.ceil(result.dim[constants_1.Dimension.Height] / m); y++) {\r\n            i *= -1;\r\n            let element = 0;\r\n            for (let x = 0; x < result.dim[constants_1.Dimension.Width]; x++) {\r\n                const selectedColor = this.selectColor(realPallet);\r\n                if (element === Math.floor(result.dim[constants_1.Dimension.Width] / 2)) {\r\n                    result.setPixelAt(x, y, selectedColor);\r\n                }\r\n                else if (queue.length == element + 1) {\r\n                    let color = queue.pop();\r\n                    if (color !== undefined) {\r\n                        result.setPixelAt(x, y, color);\r\n                    }\r\n                    else {\r\n                        throw new Error('Algorithm error. Expected an element when \"queue.pop()\" but got none.');\r\n                    }\r\n                }\r\n                else {\r\n                    queue.push(selectedColor);\r\n                    result.setPixelAt(x, y, selectedColor);\r\n                }\r\n                if (element === Math.floor(result.dim[constants_1.Dimension.Width] / 2) ||\r\n                    element === 0) {\r\n                    i *= -1;\r\n                }\r\n                element += i;\r\n            }\r\n        }\r\n        this.result = result;\r\n        return this;\r\n    }\r\n    withDim(dim) {\r\n        if (this.result !== undefined) {\r\n            throw new Error(\"Can't change the dimension after having a sprite already built.\");\r\n        }\r\n        this.spriteDimensions = dim;\r\n        this.validate();\r\n        return this;\r\n    }\r\n    withBorder(borders = this.border, borderColor = this.blankColor) {\r\n        if (this.result === undefined) {\r\n            throw new Error('No sprite is set on builder.');\r\n        }\r\n        let result = new sprite_1.default({\r\n            dim: [\r\n                this.result.dim[constants_1.Dimension.Width] +\r\n                    borders[constants_1.Border.Left] +\r\n                    borders[constants_1.Border.Right],\r\n                this.result.dim[constants_1.Dimension.Height] +\r\n                    borders[constants_1.Border.Up] +\r\n                    borders[constants_1.Border.Down]\r\n            ],\r\n            colorFill: borderColor\r\n        });\r\n        for (let x = borders[constants_1.Border.Left], i = 0; i < this.result.dim[constants_1.Dimension.Width]; x++, i++) {\r\n            for (let y = borders[constants_1.Border.Up], j = 0; j < this.result.dim[constants_1.Dimension.Height]; y++, j++) {\r\n                result.setPixelAt(x, y, this.result.pixelAt(i, j));\r\n            }\r\n        }\r\n        this.result = result;\r\n        return this;\r\n    }\r\n    withEdges(edgeColor = _1.Color.BLACK, edgeWeight = 0.7, addExtraBorder = true) {\r\n        if (this.result === undefined) {\r\n            throw new Error('No sprite is set on builder.');\r\n        }\r\n        if (addExtraBorder) {\r\n            this.withBorder([1, 1, 1, 1]);\r\n        }\r\n        for (let x = 0; x < this.result.dim[constants_1.Dimension.Width]; x++) {\r\n            for (let y = 0; y < this.result.dim[constants_1.Dimension.Height]; y++) {\r\n                let pixel = this.result.pixelAt(x, y);\r\n                if (pixel.equals(edgeColor))\r\n                    break;\r\n                if (!pixel.equals(this.blankColor)) {\r\n                    this.result.setPixelAtChecked(x, y - 1, pixel.mixWeighed(edgeColor, edgeWeight));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let y = 0; y < this.result.dim[constants_1.Dimension.Height]; y++) {\r\n            for (let x = 0; x < this.result.dim[constants_1.Dimension.Width]; x++) {\r\n                let pixel = this.result.pixelAt(x, y);\r\n                if (pixel.equals(edgeColor))\r\n                    break;\r\n                if (!pixel.equals(this.blankColor)) {\r\n                    this.result.setPixelAtChecked(x - 1, y, pixel.mixWeighed(edgeColor, edgeWeight));\r\n                    this.result.setPixelAtChecked(this.result.dim[constants_1.Dimension.Width] - x, y, pixel.mixWeighed(edgeColor, edgeWeight));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let x = 0; x < this.result.dim[constants_1.Dimension.Width]; x++) {\r\n            for (let y = this.result.dim[constants_1.Dimension.Height] - 1; y > 0; y--) {\r\n                let pixel = this.result.pixelAt(x, y);\r\n                if (pixel.equals(edgeColor))\r\n                    break;\r\n                if (!pixel.equals(this.blankColor)) {\r\n                    this.result.setPixelAtChecked(x, y + 1, pixel.mixWeighed(edgeColor, edgeWeight));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    transform(func) {\r\n        if (this.result === undefined) {\r\n            throw new Error('No sprite is set on builder.');\r\n        }\r\n        for (let x = 0; x < this.result.dim[0]; x++) {\r\n            for (let y = 0; y < this.result.dim[1]; y++) {\r\n                let pixel = this.result.pixelAt(x, y);\r\n                this.result.setPixelAt(x, y, func(this.result.dim, x, y, pixel));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    withPadding(dim, paddingColor = this.blankColor) {\r\n        if (this.result === undefined) {\r\n            throw new Error('No sprite is set on builder.');\r\n        }\r\n        if (dim[0] < this.result.dim[0]) {\r\n            throw new Error(`Cannot set padding because ${dim[0]} is less than the existing width of ${this.result.dim[0]}`);\r\n        }\r\n        if (dim[1] < this.result.dim[1]) {\r\n            throw new Error(`Cannot set padding because ${dim[1]} is less than the existing height of ${this.result.dim[1]}`);\r\n        }\r\n        let old = this.result;\r\n        this.result = new sprite_1.default({ dim: dim, colorFill: paddingColor });\r\n        let leftOffset = Math.floor((dim[0] - old.dim[0]) / 2);\r\n        let topOffset = Math.floor((dim[1] - old.dim[1]) / 2);\r\n        for (let x = leftOffset, i = 0; i < old.dim[0]; x++, i++) {\r\n            for (let y = topOffset, j = 0; j < old.dim[1]; y++, j++) {\r\n                this.result.setPixelAt(x, y, old.pixelAt(i, j));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    build() {\r\n        if (this.result === undefined) {\r\n            throw new Error('Resulting sprite is not valid.');\r\n        }\r\n        let result = this.result;\r\n        this.result = undefined;\r\n        return result;\r\n    }\r\n    getPallet() {\r\n        if (this.useRandomPallet)\r\n            return SpriteBuilder.randomPallet(this.randomColorCount, this.randomAlpha);\r\n        else\r\n            return this.colorPallet;\r\n    }\r\n    selectColor(pallet) {\r\n        return pallet[SpriteBuilder.randInt(0, pallet.length - 1)];\r\n    }\r\n    addBlanks(pallet) {\r\n        const blanksToInsert = Math.round((pallet.length * this.blankPercentage) / (1 - this.blankPercentage));\r\n        return [...pallet].concat(...new Array(blanksToInsert)\r\n            .fill(null)\r\n            .map(() => this.blankColor.copy()));\r\n    }\r\n    static randInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    static randomPallet(colorCount, randomAlpha) {\r\n        validator_1.default.positive(colorCount, 'colorCount');\r\n        return Array.from({ length: colorCount }, () => _1.Color.random(randomAlpha));\r\n    }\r\n    validate() {\r\n        validator_1.default.positive(this.spriteDimensions[0], 'this.spriteDimensions[0]');\r\n        validator_1.default.positive(this.spriteDimensions[1], 'this.spriteDimensions[1]');\r\n        validator_1.default.percentage(this.blankPercentage, 'blankPercentage');\r\n        for (let i = 0; i < this.border.length; i++) {\r\n            validator_1.default.positiveInteger(this.border[i], `border[${i}]`);\r\n        }\r\n    }\r\n}\r\nexports.default = SpriteBuilder;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst builder_1 = require(\"./builder\");\r\nconst color_1 = require(\"./color\");\r\nconst validator_1 = require(\"./validator\");\r\nclass Sprite {\r\n    constructor({ dim, array, pallet, horizontalSymmetry, colorFill }) {\r\n        validator_1.default.positiveInteger(dim[0], 'dim.x');\r\n        validator_1.default.positiveInteger(dim[1], 'dim.y');\r\n        let color = colorFill === undefined ? new color_1.default(0, 0, 0, 1) : colorFill;\r\n        let arr = array ||\r\n            new Array(dim[0] * dim[1]).fill(null).map(() => color.copy());\r\n        if (dim[0] * dim[1] != arr.length) {\r\n            throw new Error(`Invalid array dimensions [${dim[0]}, ${dim[1]}] for array of length ${arr.length}`);\r\n        }\r\n        this._dim = dim;\r\n        this._array = arr;\r\n        this._pallet = Sprite.trimPallet(pallet || new Array());\r\n        this._horizontalSymmetry = horizontalSymmetry || false;\r\n    }\r\n    get dim() {\r\n        return [...this._dim];\r\n    }\r\n    get array() {\r\n        return [...this._array].map(color => color.copy());\r\n    }\r\n    get pallet() {\r\n        return [...this._pallet].map(color => color.copy());\r\n    }\r\n    get horizontalSymmetry() {\r\n        return this._horizontalSymmetry;\r\n    }\r\n    clone() {\r\n        return new Sprite({\r\n            dim: this.dim,\r\n            array: this.array,\r\n            pallet: this.pallet,\r\n            horizontalSymmetry: this.horizontalSymmetry\r\n        });\r\n    }\r\n    arrayValues() {\r\n        return [...this._array].map(color => color.toArray());\r\n    }\r\n    matrix() {\r\n        return new Array(this.dim[0])\r\n            .fill(null)\r\n            .map((_, i) => new Array(this.dim[1])\r\n            .fill(null)\r\n            .map((_, j) => this.pixelAt(i, j).toArray()));\r\n    }\r\n    svgWidth(width, unit = 'px', parameters = '') {\r\n        let w = width + this._dim[0] - (width % this._dim[0]);\r\n        let h = (this._dim[1] / this._dim[0]) * w;\r\n        return this.svgExact(w, h, unit, parameters);\r\n    }\r\n    svgHeight(height, unit = 'px', parameters = '') {\r\n        let h = height + this._dim[1] - (height % this._dim[1]);\r\n        let w = (this._dim[0] / this._dim[1]) * h;\r\n        return this.svgExact(w, h, unit, parameters);\r\n    }\r\n    svg(width, height, unit = 'px', parameters = '') {\r\n        let w = width + this._dim[0] - (width % this._dim[0]);\r\n        let h = height + this._dim[1] - (height % this._dim[1]);\r\n        return this.svgExact(w, h, unit, parameters);\r\n    }\r\n    svgExact(width, height, unit = 'px', parameters = '') {\r\n        let result = `<svg ${parameters} width=\"${width}${unit}\" height=\"${height}${unit}\" viewBox=\"0, 0, ${this.dim[0]}, ${this.dim[1]}\">`;\r\n        for (let x = 0; x < this._dim[0]; x++) {\r\n            for (let y = 0; y < this.dim[1]; y++) {\r\n                let rgba = this.pixelAt(x, y).toRgba();\r\n                result += `<rect width=\"1\" height=\"1\" x=\"${x}\" y=\"${y}\" style=\"fill:${rgba};\" />`;\r\n            }\r\n        }\r\n        return result + '</svg>';\r\n    }\r\n    svgScale(pixelSize, unit = 'px', parameters = '') {\r\n        let width = this._dim[0] * pixelSize;\r\n        let height = this._dim[1] * pixelSize;\r\n        return this.svgExact(width, height, unit, parameters);\r\n    }\r\n    data() {\r\n        let result = new Uint32Array(this._array.length);\r\n        this._array.forEach((value, index) => {\r\n            result[index] = value.toInt();\r\n        });\r\n        return result;\r\n    }\r\n    bytes() {\r\n        let result = new Uint8Array(this._array.length * 3);\r\n        this._array.forEach((value, index) => {\r\n            result[index + 0] = value.redByte;\r\n            result[index + 1] = value.greenByte;\r\n            result[index + 2] = value.greenByte;\r\n        });\r\n        return result;\r\n    }\r\n    setPixelAt(x, y, color) {\r\n        this.checkIndex(x, y);\r\n        this._array[y * this._dim[0] + x] = color.copy();\r\n    }\r\n    pixelAt(x, y) {\r\n        this.checkIndex(x, y);\r\n        return this._array[y * this._dim[0] + x].copy();\r\n    }\r\n    pixelAtChecked(x, y) {\r\n        if (!this.withinBounds(x, y))\r\n            return undefined;\r\n        return this._array[y * this._dim[0] + x].copy();\r\n    }\r\n    setPixelAtChecked(x, y, color) {\r\n        if (!this.withinBounds(x, y))\r\n            return false;\r\n        this._array[y * this._dim[0] + x] = color.copy();\r\n        return true;\r\n    }\r\n    static builder() {\r\n        return new builder_1.default({});\r\n    }\r\n    static trimPallet(pallet) {\r\n        pallet = pallet.filter(value => value !== color_1.default.BLACK);\r\n        return pallet;\r\n    }\r\n    checkIndex(x, y) {\r\n        if (!this.withinBounds(x, y)) {\r\n            throw new Error(`Index out of bounds [${x}, ${y}] when actual dimension is [${this.dim[0]}, ${this.dim[1]}]`);\r\n        }\r\n    }\r\n    withinBounds(x, y) {\r\n        return x >= 0 && x < this._dim[0] && y >= 0 && y < this._dim[1];\r\n    }\r\n}\r\nexports.default = Sprite;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _1 = require(\".\");\r\nfunction clamp(value, min, max) {\r\n    return Math.min(Math.max(value, min), max);\r\n}\r\nconst transformFade = (dim, x, y, pixel) => {\r\n    let yR = y / dim[1];\r\n    return pixel.mixWeighed(new _1.Color(0, 0, 0), yR);\r\n};\r\nconst transformVignette = (dim, x, y, pixel) => {\r\n    let cx = dim[0] / 2;\r\n    let cy = dim[1] / 2;\r\n    let dist = Math.sqrt(Math.pow(cx - (x + 0.5), 2) + Math.pow(cy - (y + 0.5), 2));\r\n    let w = clamp((dist / Math.max(dim[0], dim[1])) * 2, 0, 1);\r\n    return pixel.mixWeighed(new _1.Color(0, 0, 0), w);\r\n};\r\nclass Utils {\r\n}\r\nUtils.clamp = clamp;\r\nUtils.transformFade = transformFade;\r\nUtils.transformVignette = transformVignette;\r\nexports.default = Utils;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Dimension = exports.Border = void 0;\r\nvar Border;\r\n(function (Border) {\r\n    Border[Border[\"Up\"] = 0] = \"Up\";\r\n    Border[Border[\"Down\"] = 1] = \"Down\";\r\n    Border[Border[\"Left\"] = 2] = \"Left\";\r\n    Border[Border[\"Right\"] = 3] = \"Right\";\r\n})(Border = exports.Border || (exports.Border = {}));\r\nvar Dimension;\r\n(function (Dimension) {\r\n    Dimension[Dimension[\"Width\"] = 0] = \"Width\";\r\n    Dimension[Dimension[\"Height\"] = 1] = \"Height\";\r\n})(Dimension = exports.Dimension || (exports.Dimension = {}));\r\n","import React, { useState } from 'react'\nimport './App.css'\n\nimport { Color, SpriteBuilder, SpriteUtils } from 'spaceship-sprites'\n\nconst dimMatrix: {\n    type: string\n    dim: [number, number]\n}[] = [\n    {\n        type: 'Fighter',\n        dim: [5, 5]\n    },\n    {\n        type: 'Heavy Fighter',\n        dim: [5, 7]\n    },\n    {\n        type: 'Corvette',\n        dim: [5, 9]\n    },\n    {\n        type: 'Frigate',\n        dim: [5, 9]\n    },\n    {\n        type: 'Destroyer',\n        dim: [5, 9]\n    },\n    {\n        type: 'Cruiser',\n        dim: [5, 13]\n    },\n    {\n        type: 'Interceptor',\n        dim: [5, 13]\n    },\n    {\n        type: 'Battlecruiser',\n        dim: [7, 17]\n    },\n    {\n        type: 'Battleship',\n        dim: [7, 17]\n    },\n    {\n        type: 'Carrier',\n        dim: [9, 21]\n    },\n    {\n        type: 'Starship',\n        dim: [9, 21]\n    },\n    {\n        type: 'Station',\n        dim: [11, 25]\n    }\n]\n\nconst btnStyle = {\n    position: 'fixed',\n    padding: '0 16px',\n    backgroundColor: '#1D3790',\n    borderRadius: '2px',\n    outline: 0,\n    border: 'none',\n    cursor: 'pointer',\n    lineHeight: '36px',\n    color: 'white'\n}\n\nconst canvasSize = 234\nconst constPadding = 39\n\nconst saveSvg = (id: string): void => {\n    let element = document.getElementById(id)\n    if (element === null) {\n        console.log(id)\n        alert('Error')\n        return\n    }\n\n    let svg = element.querySelector('svg')\n    let canvas = document.createElement('canvas')\n    canvas.width = canvasSize\n    canvas.height = canvasSize\n    let ctx = canvas.getContext('2d')\n    let loader = new Image()\n\n    loader.width = canvasSize\n    loader.height = canvasSize\n\n    loader.onload = () => {\n        ctx?.drawImage(loader, 0, 0, loader.width, loader.height)\n        let image = canvas.toDataURL()\n        console.log(image)\n\n        let link = document.createElement('a')\n        link.download = id\n        link.href = image\n        link.click()\n    }\n\n    let svgAsXML = new XMLSerializer().serializeToString(svg as any)\n    loader.src = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML)\n}\n\nconst App: React.FC = () => {\n    let [reload, setReload] = useState(1)\n    let [sameColor, setSameColor] = useState(false)\n\n    let pallet: Array<Color> = [\n        new Color(50, 10, 100),\n        new Color(190, 60, 50),\n        new Color(80, 70, 140)\n    ]\n\n    let padding: [number, number] = [constPadding, constPadding]\n\n    let c = 0.4\n\n    let config = {\n        colorPallet: pallet,\n        blankColor: new Color(c, c, c),\n        useRandomPallet: !sameColor\n    }\n\n    return (\n        <>\n            <div style={{ textAlign: 'center' }}>\n                <h2>Click the images to save them</h2>\n            </div>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-around',\n                    flexWrap: 'wrap'\n                }}>\n                {dimMatrix.map((value, index) => (\n                    <div key={`hehe-${index}`}>\n                        <p>{value.type}</p>\n                        <div\n                            key={`${value.type}`}\n                            id={`${value.type}`}\n                            onClick={() => saveSvg(`${value.type}`)}\n                            style={{ cursor: 'pointer' }}\n                            dangerouslySetInnerHTML={{\n                                __html: new SpriteBuilder(config)\n                                    .withDim(value.dim)\n                                    .single()\n                                    .withEdges(Color.BLACK, 0.3)\n                                    .withEdges(Color.BLACK, 0.7)\n                                    .withPadding(padding)\n                                    .transform(SpriteUtils.transformVignette)\n                                    .build()\n                                    .svgWidth(canvasSize - 1)\n                            }}\n                        />\n                    </div>\n                ))}\n            </div>\n            <button\n                style={\n                    {\n                        right: '16px',\n                        bottom: '16px',\n                        ...btnStyle\n                    } as any\n                }\n                onClick={() => setReload(reload * -1)}>\n                Generate\n            </button>\n            <button\n                style={\n                    {\n                        right: '128px',\n                        bottom: '16px',\n                        ...btnStyle\n                    } as any\n                }\n                onClick={() => setSameColor(!sameColor)}>\n                {sameColor ? 'Different Colors' : 'Same Colors'}\n            </button>\n        </>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}